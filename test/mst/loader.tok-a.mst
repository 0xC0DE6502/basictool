    1*FX229,1
    2*FX4,1
    3integra_b=FALSE
    4ON ERROR GOTO 100
    5integra_b=FNusr_osbyte_x(&49,&FF,0)=&49
  101ON ERROR PROCerror
  102*EXEC
  103CLOSE #0
  104A%=&85:X%=135:potential_himem=(USR&FFF4 AND &FFFF00) DIV &100
  105IF potential_himem=&8000 AND HIMEM<&8000 THEN MODE 135:CHAIN "LOADER"
  106VDU 23,16,0,254,0;0;0;
  107fg_colour=&409
  108bg_colour=&40A
  109?&40B=3
  110screen_mode=&403
  111DIM block% 256
  112A%=0:X%=1:host_os=(USR&FFF4 AND &FF00) DIV &100
  113IF integra_b THEN host_os=1
  114electron=host_os=0
  115*/FINDSWR
  116ON ERROR GOTO 500
  117*INFO XYZZY1
  500ON ERROR PROCerror
  501shadow=potential_himem=&8000
  502shadow_extra$=""
  503tube=PAGE<&E00
  504IF tube THEN PROCdetect_turbo
  505private_ram_in_use=FALSE
  506IF shadow AND NOT tube THEN PROCassemble_shadow_driver
  507PROCdetect_swr
  508MODE 135:VDU 23,1,0;0;0;0;
  509?fg_colour=7:?bg_colour=4
  510IF electron THEN VDU 19,0,?bg_colour,0;0,19,7,?fg_colour,0;0
  511IF electron THEN PROCelectron_header_footer ELSE PROCbbc_header_footer
  512normal_fg=&87:normal_graphics_fg=normal_fg+16:header_fg=&83:highlight_fg=&83:highlight_bg=&81:electron_space=0
  513IF electron THEN normal_fg=0:normal_graphics_fg=32:header_fg=0:electron_space=32
  514PRINT CHR$header_fg;"Hardware detected:"
  515vpos=VPOS
  516IF tube THEN PRINT CHR$normal_fg;"  Second processor";tube_ram$
  517IF shadow THEN PRINT CHR$normal_fg;"  Shadow RAM ";shadow_extra$
  518IF swr$<>"" THEN PRINT CHR$normal_fg;"  ";swr$
  519IF vpos=VPOS THEN PRINT CHR$normal_fg;"  None"
  520PRINT
  521die_top_y=VPOS
  522PROCchoose_version_and_check_ram
  523IF tube OR shadow THEN PROCmode_menu ELSE ?screen_mode=7+electron:mode_keys_vpos=VPOS:PROCshow_mode_keys:PROCspace:REPEAT UNTIL FNhandle_common_key(GET)
  524IF ?screen_mode=7 THEN ?fg_colour=6
  525PRINTTAB(0,space_y);CHR$normal_fg;"Loading:";:pos=POS:PRINT "                               ";
  526PRINTTAB(pos,space_y);CHR$normal_graphics_fg;
  527VDU 23,255,-1;-1;-1;-1;
  528IF tube THEN */:0.$.CACHE2P
  529IF NOT tube THEN ?&408=FNcode_start DIV 256
  530fs=FNfs
  531IF fs<>4 THEN path$=FNpath
  532IF fs=5 THEN *DIR
  533ON ERROR GOTO 1000
  534IF fs=4 THEN PROCoscli("DIR S") ELSE *DIR SAVES
 1000ON ERROR PROCerror
 1001IF fs=4 THEN filename$="/"+binary$ ELSE filename$=path$+".DATA"
 1002IF LENfilename$>=49 THEN PROCdie("Game data path too long")
 1003filename_data=&42F
 1004$filename_data=filename$
 1005*FX4,0
 1006IF fs=4 THEN PROCoscli($filename_data) ELSE PROCoscli("/"+path$+"."+binary$)
 1007END
 1008DEF PROCerror:CLS:REPORT:PRINT" at line ";ERL:PROCfinalise
 1009DEF PROCdie(message$)
 1010VDU 28,0,space_y,39,die_top_y,12
 1011PROCpretty_print(normal_fg,message$)
 1012PRINT
 1013DEF PROCfinalise
 1014*FX229,0
 1015*FX4,0
 1016END
 1017DEF PROCelectron_header_footer
 1018VDU 23,128,0;0,255,255,0,0;
 1019PRINTTAB(0,23);STRING$(40,CHR$128);"Powered by Ozmoo 6.0 (Acorn alpha 16)";
 1020IF POS=0 THEN VDU 30,11 ELSE VDU 30
 1021PRINT "Hollywoo";:IF POS>0 THEN PRINT
 1022PRINTSTRING$(40,CHR$128);
 1023PRINT:space_y=22
 1024ENDPROC
 1025DEF PROCbbc_header_footer
 1026PRINTTAB(0,21);:PRINT
 1027PRINT
 1028PRINTCHR$147;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,";
 1029PRINTCHR$131;"Powered by Ozmoo 6.0 (Acorn alpha 16)";
 1030IF POS=0 THEN VDU 30,11 ELSE VDU 30
 1031PRINTCHR$141;"Hollywoo"
 1032PRINTCHR$141;"Hollywoo"
 1033PRINTCHR$147;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,";
 1034PRINT
 1035PRINTTAB(0,4);:space_y=22
 1036ENDPROC
 1037DEF PROCchoose_version_and_check_ram
 1038IF tube THEN binary$=":0.$.OZMOO2P":ENDPROC
 1039PROCchoose_non_tube_version
 1040IF PAGE>max_page THEN PROCdie("Sorry, you need PAGE<=&"+STR$~max_page+"; it is &"+STR$~PAGE+".")
 1041extra_main_ram=max_page-PAGE
 1042IF integra_b THEN vmem_only_swr=&2C00 ELSE vmem_only_swr=0
 1043flexible_swr=swr_size-vmem_only_swr
 1044IF medium_dynmem THEN PROCcheck_ram_medium_dynmem:ENDPROC
 1045flexible_swr=flexible_swr-swr_dynmem_needed
 1046IF flexible_swr<0 THEN extra_main_ram=extra_main_ram+flexible_swr:flexible_swr=0
 1047PROCsubtract_ram(&400)
 1048IF extra_main_ram<0 THEN PROCdie_ram(-extra_main_ram,"main or sideways RAM")
 1049free_main_ram=extra_main_ram
 1050ENDPROC
 1051DEF PROCcheck_ram_medium_dynmem
 1052flexible_swr=flexible_swr-swr_dynmem_needed
 1053PROCsubtract_ram(&400)
 1054IF flexible_swr<0 THEN PROCdie_ram(-flexible_swr,"sideways RAM")
 1055IF extra_main_ram<0 THEN PROCdie_ram(-extra_main_ram,"main RAM")
 1056free_main_ram=extra_main_ram
 1057ENDPROC
 1058DEF PROCsubtract_ram(n)
 1059IF vmem_only_swr>0 THEN d=FNmin(n,vmem_only_swr):vmem_only_swr=vmem_only_swr-d:n=n-d
 1060IF flexible_swr>0 THEN d=FNmin(n,flexible_swr):flexible_swr=flexible_swr-d:n=n-d
 1061extra_main_ram=extra_main_ram-n
 1062ENDPROC
 1063DEF FNcode_start
 1064p=PAGE
 1065IF NOT shadow THEN =p
 1066IF NOT shadow_driver THEN =p
 1067IF ?screen_mode=0 THEN =p
 1068shadow_cache=FNmin(4*256,free_main_ram)
 1069IF p+shadow_cache>=&3000 THEN shadow_cache=&3000-p
 1070IF shadow_cache<512 THEN shadow_cache=0
 1071=p+shadow_cache
 1072DEF FNmin(a,b)
 1073IF a<b THEN =a ELSE =b
 1074DEF FNusr_osbyte_x(A%,X%,Y%)=(USR&FFF4 AND &FF00) DIV &100
 1075DEF PROCchoose_non_tube_version
 1076IF electron THEN binary$=":0.$.OZMOOE":max_page=6400:swr_dynmem_needed=&3000:medium_dynmem=TRUE:ENDPROC
 1077IF shadow THEN binary$=":0.$.OZMOOSH":max_page=8960:swr_dynmem_needed=0:medium_dynmem=FALSE:ENDPROC
 1078binary$=":0.$.OZMOOB":max_page=8448:swr_dynmem_needed=-&400:medium_dynmem=FALSE
 1079ENDPROC
 1080DEF PROCmode_menu
 1081DIM mode_x(8),mode_y(8)
 1082max_x=2
 1083max_y=1
 1084DIM menu$(max_x,max_y),menu_x(max_x)
 1085menu$(0,0)="0) 80x32"
 1086menu$(0,1)="3) 80x25"
 1087menu$(1,0)="4) 40x32"
 1088menu$(1,1)="6) 40x25"
 1089menu$(2,0)="7) 40x25   "
 1090menu$(2,1)="   teletext"
 1091IF electron THEN max_x=1:mode_list$="0346" ELSE mode_list$="03467"
 1092FOR y=max_y TO 0 STEP -1:FOR x=0 TO max_x:mode=VALLEFT$(menu$(x,y),1):mode_x(mode)=x:mode_y(mode)=y:NEXT:NEXT
 1093PRINT CHR$header_fg;"Screen mode:";CHR$normal_fg;CHR$electron_space;"(hit ";:sep$="":FOR i=1 TO LEN(mode_list$):PRINT sep$;MID$(mode_list$,i,1);:sep$="/":NEXT:PRINT " to change)"
 1094menu_top_y=VPOS
 1095IF max_x=2 THEN gutter=0 ELSE gutter=5
 1096FOR y=0 TO max_y:PRINTTAB(0,menu_top_y+y);CHR$normal_fg;:FOR x=0 TO max_x:menu_x(x)=POS:PRINT SPC2;menu$(x,y);SPC(2+gutter);:NEXT:NEXT
 1097mode_keys_vpos=menu_top_y+max_y+2
 1098mode$="7":IF INSTR(mode_list$,mode$)=0 THEN mode$=RIGHT$(mode_list$,1)
 1099x=mode_x(VALmode$):y=mode_y(VALmode$):PROChighlight(x,y,TRUE):PROCspace
 1100REPEAT
 1101old_x=x:old_y=y
 1102key=GET
 1103IF key=136 AND x>0 THEN x=x-1
 1104IF key=137 AND x<max_x THEN x=x+1
 1105IF key=138 AND y<max_y THEN y=y+1
 1106IF key=139 AND y>0 THEN y=y-1
 1107key$=CHR$key:IF INSTR(mode_list$,key$)<>0 THEN x=mode_x(VALkey$):IF NOT FNis_mode_7(x) THEN y=mode_y(VALkey$)
 1108IF x<>old_x OR (y<>old_y AND NOT FNis_mode_7(x)) THEN PROChighlight(old_x,old_y,FALSE):PROChighlight(x,y,TRUE)
 1109UNTIL FNhandle_common_key(key)
 1110ENDPROC
 1111DEF FNhandle_common_key(key)
 1112IF electron AND key=2 THEN ?bg_colour=(?bg_colour+1) MOD 8:VDU 19,0,?bg_colour,0;0
 1113IF electron AND key=6 THEN ?fg_colour=(?fg_colour+1) MOD 8:VDU 19,7,?fg_colour,0;0
 1114=key=32 OR key=13
 1115DEF PROChighlight(x,y,on)
 1116IF on AND FNis_mode_7(x) THEN ?screen_mode=7 ELSE IF on THEN ?screen_mode=VAL(menu$(x,y))
 1117IF on THEN PROCshow_mode_keys
 1118IF electron THEN PROChighlight_internal_electron(x,y,on):ENDPROC
 1119IF FNis_mode_7(x) THEN PROChighlight_internal(x,0,on):y=1
 1120DEF PROChighlight_internal(x,y,on)
 1121IF x<2 THEN PRINTTAB(menu_x(x)+3+LENmenu$(x,y),menu_top_y+y);CHR$normal_fg;CHR$156;
 1122PRINTTAB(menu_x(x)-1,menu_top_y+y);
 1123IF on THEN PRINT CHR$highlight_bg;CHR$157;CHR$highlight_fg ELSE PRINT "  ";CHR$normal_fg
 1124ENDPROC
 1125DEF PROChighlight_internal_electron(x,y,on)
 1126PRINTTAB(menu_x(x),menu_top_y+y);
 1127IF on THEN COLOUR 135:COLOUR 0 ELSE COLOUR 128:COLOUR 7
 1128PRINT SPC(2);menu$(x,y);SPC(2);
 1129COLOUR 128:COLOUR 7
 1130ENDPROC
 1131DEF PROCpretty_print(colour,message$)
 1132prefix$=CHR$colour+STRING$(POS," ")
 1133i=1
 1134VDU colour
 1135REPEAT
 1136space=INSTR(message$," ",i+1)
 1137IF space=0 THEN word$=MID$(message$,i) ELSE word$=MID$(message$,i,space-i)
 1138new_pos=POS+LENword$
 1139IF new_pos<40 THEN PRINT word$;" "; ELSE IF new_pos=40 THEN PRINT word$; ELSE PRINT'prefix$;word$;" ";
 1140IF POS=0 AND space<>0 THEN PRINT prefix$;
 1141i=space+1
 1142UNTIL space=0
 1143IF POS<>0 THEN PRINT
 1144ENDPROC
 1145DEF PROCdetect_turbo
 1146turbo=0<>?&8F
 1147?&40E=turbo
 1148IF turbo THEN tube_ram$=" (256K)" ELSE tube_ram$=" (64K)"
 1149ENDPROC
 1150DEF PROCassemble_shadow_driver
 1151shadow_driver=TRUE
 1152IF integra_b THEN PROCassemble_shadow_driver_integra_b:ENDPROC
 1153IF electron AND FNusr_osbyte_x(&EF,0,&FF)=&80 THEN PROCassemble_shadow_driver_electron_mrb:ENDPROC
 1154IF host_os=2 THEN PROCassemble_shadow_driver_bbc_b_plus:ENDPROC
 1155IF host_os>=3 THEN PROCassemble_shadow_driver_master:ENDPROC
 1156shadow_driver=FALSE:shadow_extra$="(screen only)"
 1157ENDPROC
 1158DEF PROCassemble_shadow_driver_electron_mrb
 1159FOR opt%=0 TO 2 STEP 2
 1160P%=&8C4
 1161[OPT opt%
 1162CMP #&30:BCS copy_from_shadow
 1163STA lda_abs_x+2
 1164LDX #0
 1165.copy_to_shadow_loop
 1166.lda_abs_x
 1167LDA &FF00,X 
 1168BIT our_rts:JSR &FBFD 
 1169INX
 1170BNE copy_to_shadow_loop
 1171.our_rts
 1172RTS
 1173.copy_from_shadow
 1174STY sta_abs_x+2:TAY
 1175LDX #0
 1176.copy_from_shadow_loop
 1177CLV:JSR &FBFD 
 1178.sta_abs_x
 1179STA &FF00,X 
 1180INX
 1181BNE copy_from_shadow_loop
 1182RTS
 1183]
 1184NEXT
 1185ENDPROC
 1186DEF PROCassemble_shadow_driver_integra_b
 1187FOR opt%=0 TO 2 STEP 2
 1188P%=&8C4
 1189[OPT opt%
 1190STA lda_abs_y+2:STY sta_abs_y+2
 1191LDA #&6C:LDX #1:JSR &FFF4 
 1192LDY #0
 1193.copy_loop
 1194.lda_abs_y
 1195LDA &FF00,Y 
 1196.sta_abs_y
 1197STA &FF00,Y 
 1198DEY
 1199BNE copy_loop
 1200LDA #&6C:LDX #0:JSR &FFF4 
 1201RTS
 1202]
 1203NEXT
 1204ENDPROC
 1205DEF PROCassemble_shadow_driver_bbc_b_plus
 1206private_ram_in_use=FALSE
 1207extended_vector_table=&D9F
 1208FOR vector=0 TO 26
 1209IF extended_vector_table?(vector*3+2)>=128 THEN private_ram_in_use=TRUE
 1210NEXT
 1211IF private_ram_in_use THEN PROCassemble_shadow_driver_bbc_b_plus_os:ENDPROC
 1212shadow_copy_private_ram=&AF00
 1213FOR opt%=0 TO 2 STEP 2
 1214P%=&8C4
 1215[OPT opt%
 1216LDX &F4:STX lda_imm_bank+1
 1217LDX #128:STX &F4:STX &FE30
 1218JMP shadow_copy_private_ram
 1219.stub_finish
 1220.lda_imm_bank
 1221LDA #0 
 1222STA &F4:STA &FE30
 1223RTS
 1224]
 1225O%=block%:P%=shadow_copy_private_ram
 1226shadow_copy_low_ram=O%
 1227[OPT opt%+4
 1228STA lda_abs_y+2:STY sta_abs_y+2
 1229LDY #0
 1230.copy_loop
 1231.lda_abs_y
 1232LDA &FF00,Y 
 1233.sta_abs_y
 1234STA &FF00,Y 
 1235DEY
 1236BNE copy_loop
 1237JMP stub_finish
 1238]
 1239shadow_copy_low_ram_end=O%
 1240P%=O%
 1241[OPT opt%
 1242.copy_to_private_ram
 1243LDA &F4:STA &70
 1244LDA #128:STA &F4:STA &FE30
 1245LDY #shadow_copy_low_ram_end-shadow_copy_low_ram-1
 1246.copy_to_private_ram_loop
 1247LDA shadow_copy_low_ram,Y:STA shadow_copy_private_ram,Y
 1248DEY:CPY #&FF:BNE copy_to_private_ram_loop
 1249LDA &70:STA &F4:STA &FE30
 1250RTS
 1251]
 1252NEXT
 1253CALL copy_to_private_ram
 1254ENDPROC
 1255DEF PROCassemble_shadow_driver_bbc_b_plus_os
 1256shadow_extra$="(via OS)"
 1257FOR opt%=0 TO 2 STEP 2
 1258P%=&8C4
 1259[OPT opt%
 1260CMP #&30:BCS copy_from_shadow
 1261STA lda_abs_y+2:STY &D7
 1262LDY #0:STY &D6
 1263.copy_to_shadow_loop
 1264.lda_abs_y
 1265LDA &FF00,Y 
 1266JSR &FFB3 
 1267INY
 1268BNE copy_to_shadow_loop
 1269RTS
 1270.copy_from_shadow
 1271STA &F7:STY sta_abs+2
 1272LDY #0:STY &F6
 1273.copy_from_shadow_loop
 1274JSR &FFB9 
 1275.sta_abs
 1276STA &FF00 
 1277INC &F6
 1278INC sta_abs+1
 1279BNE copy_from_shadow_loop
 1280RTS
 1281]
 1282NEXT
 1283ENDPROC
 1284DEF PROCassemble_shadow_driver_master
 1285FOR opt%=0 TO 2 STEP 2
 1286P%=&8C4
 1287[OPT opt%
 1288STA lda_abs_y+2:STY sta_abs_y+2
 1289LDA #4:TSB &FE34 
 1290LDY #0
 1291.copy_loop
 1292.lda_abs_y
 1293LDA &FF00,Y 
 1294.sta_abs_y
 1295STA &FF00,Y 
 1296DEY
 1297BNE copy_loop
 1298LDA #4:TRB &FE34 
 1299RTS
 1300]
 1301NEXT
 1302ENDPROC
 1303DEF PROCdetect_swr
 1304swr_banks=FNpeek(&904):swr$=""
 1305swr_adjust=0
 1306IF NOT tube THEN PROCdetect_private_ram
 1307IF FNpeek(&903)>2 THEN swr$="("+STR$(swr_banks*16)+"K unsupported sideways RAM)"
 1308swr_size=&4000*FNpeek(&904)-swr_adjust
 1309IF swr_banks=0 THEN ENDPROC
 1310IF swr_size<=12*1024 THEN swr$="12K private RAM":ENDPROC
 1311swr$=STR$(swr_size DIV 1024)+"K sideways RAM (bank":IF swr_banks>1 THEN swr$=swr$+"s"
 1312swr$=swr$+" &":FOR i=0 TO swr_banks-1:bank=FNpeek(&905+i)
 1313IF bank>=64 THEN bank$="P" ELSE bank$=STR$~bank
 1314swr$=swr$+bank$:NEXT:swr$=swr$+")"
 1315ENDPROC
 1316DEF PROCdetect_private_ram
 1317IF swr_banks<9 AND integra_b THEN swr_banks?&905=64:swr_banks=swr_banks+1:?&904=swr_banks:swr_adjust=16*1024-&2C00
 1318IF swr_banks<9 AND host_os=2 THEN IF NOT private_ram_in_use THEN swr_banks?&905=128:swr_banks=swr_banks+1:?&904=swr_banks:swr_adjust=16*1024-&2E00
 1319ENDPROC
 1320DEF PROCunsupported_machine(machine$):PROCdie("Sorry, this game won't run on "+machine$+".")
 1321DEF PROCdie_ram(amount,ram_type$):PROCdie("Sorry, you need at least "+STR$(amount/1024)+"K more "+ram_type$+".")
 1322DEF PROCshow_mode_keys
 1323mode_keys_last_max_y=mode_keys_last_max_y
 1324IF mode_keys_last_max_y=0 THEN PRINTTAB(0,mode_keys_vpos);CHR$header_fg;"In-game controls:" ELSE PRINTTAB(0,mode_keys_vpos+1);
 1325PRINT CHR$normal_fg;"  SHIFT:  show next page of text"
 1326IF ?screen_mode=7 THEN PRINT CHR$normal_fg;"  CTRL-F: change status line colour"
 1327IF ?screen_mode=7 THEN PRINT CHR$normal_fg;"  CTRL-I: change input colour      "
 1328IF ?screen_mode<>7 THEN PRINT CHR$normal_fg;"  CTRL-F: change foreground colour "
 1329IF ?screen_mode<>7 THEN PRINT CHR$normal_fg;"  CTRL-B: change background colour "
 1330IF ?screen_mode<>7 THEN PRINT CHR$normal_fg;"  CTRL-S: change scrolling mode    "
 1331IF VPOS<mode_keys_last_max_y THEN PRINT SPC(40*(mode_keys_last_max_y-VPOS));
 1332mode_keys_last_max_y=VPOS
 1333ENDPROC
 1334DEF PROCspace
 1335PRINTTAB(0,space_y);CHR$normal_fg;"Press SPACE/RETURN to start the game...";
 1336ENDPROC
 1337DEF FNis_mode_7(x)=LEFT$(menu$(x,0),1)="7"
 1338DEF PROCoscli($block%):X%=block%:Y%=X%DIV256:CALL&FFF7:ENDPROC
 1339DEF FNpeek(addr):!block%=&FFFF0000 OR addr:A%=5:X%=block%:Y%=block% DIV 256:CALL &FFF1:=block%?4
 1340DEF FNfs:A%=0:Y%=0:=USR&FFDA AND &FF
 1341DEF FNpath
 1342DIM data% 256
 1343path$=""
 1344REPEAT
 1345block%!1=data%
 1346A%=6:X%=block%:Y%=block% DIV 256:CALL &FFD1
 1347name=data%+1+?data%
 1348name?(1+?name)=13
 1349name$=FNstrip($(name+1))
 1350path$=name$+"."+path$
 1351IF name$<>"$" AND name$<>"&" THEN *DIR ^
 1352UNTIL name$="$" OR name$="&"
 1353path$=LEFT$(path$,LEN(path$)-1)
 1354?name=13
 1355drive$=FNstrip($(data%+1))
 1356IF drive$<>"" THEN path$=":"+drive$+"."+path$
 1357PROCoscli("DIR "+path$)
 1358=path$
 1359DEF FNstrip(s$)
 1360s$=s$+" "
 1361REPEAT:s$=LEFT$(s$,LEN(s$)-1):UNTIL RIGHT$(s$,1)<>" "
 1362=s$
 1363DEF FNmax(a,b):IF a<b THEN =b ELSE =a
